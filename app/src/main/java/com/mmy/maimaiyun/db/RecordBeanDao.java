package com.mmy.maimaiyun.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_BEAN".
*/
public class RecordBeanDao extends AbstractDao<RecordBean, Long> {

    public static final String TABLENAME = "RECORD_BEAN";

    /**
     * Properties of entity RecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Good_id = new Property(1, String.class, "good_id", false, "good_id");
        public final static Property Good_price = new Property(2, String.class, "good_price", false, "good_price");
        public final static Property Is_collect = new Property(3, int.class, "is_collect", false, "is_collect");
        public final static Property Record_time = new Property(4, String.class, "record_time", false, "record_time");
        public final static Property Shop_pic = new Property(5, String.class, "shop_pic", false, "shop_pic");
        public final static Property Good_name = new Property(6, String.class, "good_name", false, "good_name");
    }


    public RecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"good_id\" TEXT," + // 1: good_id
                "\"good_price\" TEXT," + // 2: good_price
                "\"is_collect\" INTEGER NOT NULL ," + // 3: is_collect
                "\"record_time\" TEXT," + // 4: record_time
                "\"shop_pic\" TEXT," + // 5: shop_pic
                "\"good_name\" TEXT);"); // 6: good_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String good_id = entity.getGood_id();
        if (good_id != null) {
            stmt.bindString(2, good_id);
        }
 
        String good_price = entity.getGood_price();
        if (good_price != null) {
            stmt.bindString(3, good_price);
        }
        stmt.bindLong(4, entity.getIs_collect());
 
        String record_time = entity.getRecord_time();
        if (record_time != null) {
            stmt.bindString(5, record_time);
        }
 
        String shop_pic = entity.getShop_pic();
        if (shop_pic != null) {
            stmt.bindString(6, shop_pic);
        }
 
        String good_name = entity.getGood_name();
        if (good_name != null) {
            stmt.bindString(7, good_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String good_id = entity.getGood_id();
        if (good_id != null) {
            stmt.bindString(2, good_id);
        }
 
        String good_price = entity.getGood_price();
        if (good_price != null) {
            stmt.bindString(3, good_price);
        }
        stmt.bindLong(4, entity.getIs_collect());
 
        String record_time = entity.getRecord_time();
        if (record_time != null) {
            stmt.bindString(5, record_time);
        }
 
        String shop_pic = entity.getShop_pic();
        if (shop_pic != null) {
            stmt.bindString(6, shop_pic);
        }
 
        String good_name = entity.getGood_name();
        if (good_name != null) {
            stmt.bindString(7, good_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordBean readEntity(Cursor cursor, int offset) {
        RecordBean entity = new RecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // good_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // good_price
            cursor.getInt(offset + 3), // is_collect
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // record_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shop_pic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // good_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGood_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGood_price(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_collect(cursor.getInt(offset + 3));
        entity.setRecord_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShop_pic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGood_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
